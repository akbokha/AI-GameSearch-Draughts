package nl.tue.s2id90.contest;

import java.awt.Component;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import static javax.swing.JOptionPane.OK_OPTION;
import static javax.swing.JOptionPane.PLAIN_MESSAGE;
import nl.tue.s2id90.game.Player;
import nl.tue.win.util.Pair;
import org10x10.dam.ui.swing.movelist.GenericListModel;

/**
 *
 * @author huub
 */
public class SelectionPanel<P extends Player, Plugin extends PlayerProvider<P>> extends javax.swing.JPanel {
    private final GenericListModel<Pair<String,P>> allPlayersModel;
    private final GenericListModel<Pair<String,P>> selectedPlayersModel;

    /**
     * Creates new form SelectionPanel
     */
    public SelectionPanel(Map<String,List<P>> map) {
        initComponents();
        List<Pair<String,P>> combos = new ArrayList<>();
        for(String pluginName: map.keySet()) {
            List<P> players = map.get(pluginName);
            if (players!=null) {
                for(final P p : map.get(pluginName)) {
                    combos.add(new Pair<String,P>(pluginName,p) {
                        public String toString() {
                            return p.getName();  // as it appears in the list.
                        }
                    });
                }
            }
        }
        Comparator<Pair<String,P>> byName = Comparator.comparing(p->p.second.getName().toLowerCase());
        Collections.sort(combos, byName);
        selectedPlayersList.setModel(selectedPlayersModel=new GenericListModel(new ArrayList<>()));
        allPlayersList.setModel(allPlayersModel=new GenericListModel(combos));
        if (combos.size()>0) {
            allPlayersList.setSelectedIndex(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        playerField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        packageField = new javax.swing.JTextField();
        iconLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        selectedPlayersList = new javax.swing.JList();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        allPlayersList = new javax.swing.JList();
        selectButton = new javax.swing.JButton();
        deselectButton = new javax.swing.JButton();

        jLabel1.setText("player");

        playerField.setEditable(false);

        jLabel2.setText("package");

        packageField.setEditable(false);

        selectedPlayersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedPlayersListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(selectedPlayersList);

        allPlayersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                allPlayersListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(allPlayersList);

        selectButton.setText(">>");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        deselectButton.setText("<<");
        deselectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deselectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(selectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselectButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerField, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(packageField))
                .addGap(18, 18, 18)
                .addComponent(iconLabel)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(playerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(packageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        final int index = allPlayersList.getSelectedIndex();
        if (index>=0) {            
            Pair<String, P> selection = allPlayersModel.get(index);
            allPlayersModel.remove(selection);
            selectedPlayersModel.add(selection);
            selectedPlayersList.setSelectedValue(selection, true);
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void deselectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectButtonActionPerformed
        final int index = selectedPlayersList.getSelectedIndex();
        if (index>=0) {            
            Pair<String, P> selection = selectedPlayersModel.get(index);
            selectedPlayersModel.remove(selection);
            allPlayersModel.add(selection);
            allPlayersList.setSelectedValue(selection, true);
        }
    }//GEN-LAST:event_deselectButtonActionPerformed

    private void allPlayersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_allPlayersListValueChanged
        final int index = allPlayersList.getSelectedIndex();
        if (index>=0 && allPlayersList.isSelectedIndex(index)) {            
            Pair<String, P> selection = allPlayersModel.get(index);
            playerField.setText(selection.second.getName());
            packageField.setText(selection.first);
            fillPlayerLabel(selection.second,iconLabel);
            selectedPlayersList.clearSelection();
            selectButton.setEnabled(true);
            deselectButton.setEnabled(false);
        }
    }//GEN-LAST:event_allPlayersListValueChanged

    private void selectedPlayersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectedPlayersListValueChanged
        final int index = selectedPlayersList.getSelectedIndex();
        if (index>=0 && selectedPlayersList.isSelectedIndex(index)) { 
                Pair<String, P> selection = selectedPlayersModel.get(index);
                playerField.setText(selection.second.getName());
                packageField.setText(selection.first);
                fillPlayerLabel(selection.second,iconLabel);
                allPlayersList.clearSelection();
                deselectButton.setEnabled(true);
                selectButton.setEnabled(false);
        }
    }//GEN-LAST:event_selectedPlayersListValueChanged


    public List<P> getSelectedPlayers() {
        List<P> result = new ArrayList<>();
        for(Pair<String,P> pair : selectedPlayersModel) {
            result.add(pair.second);
        }
        return result;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList allPlayersList;
    private javax.swing.JButton deselectButton;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField packageField;
    private javax.swing.JTextField playerField;
    private javax.swing.JButton selectButton;
    private javax.swing.JList selectedPlayersList;
    // End of variables declaration//GEN-END:variables

    
    /**
     *
     * @param <P>
     * @param <Plugin>
     * @param component
     * @param plugins
     * @return list of selected players (null if cancel button is used)
     */
    public static <P extends Player,Plugin extends PlayerProvider<P>>
    List<P> showDialog(Component component, List<Plugin> plugins) {        
        // find the players in the plugins and register them per plugin name!
        Map<String,List<P>> map = new HashMap<>();
        for(Plugin plugin : plugins) {
            List<P> players = plugin.getPlayers();
            List<P> list = map.get(plugin.getName());
            if (list==null) {
                list = new ArrayList<>();
                map.put(plugin.getName(), list);
            }
            list.addAll(players);
        }
        
        // create GUI
        SelectionPanel allPluginsPanel = new SelectionPanel(map);
                
        
        /** show dialog panel and wait for cancel or okay button to be pressed. **/
        int option = JOptionPane.showConfirmDialog(component, 
                allPluginsPanel, 
                "select players", 
                OK_CANCEL_OPTION, 
                PLAIN_MESSAGE);
        
        if (option == OK_OPTION) {
            return allPluginsPanel.getSelectedPlayers(); 
        } else {
            return null;
        }
    }
    
    private void fillPlayerLabel(P player, JLabel label) {
        
        //label.setText(player.getName());
        ImageIcon icon = player.getIcon();
        if (icon!=null) {
            Image image = icon.getImage();
            if (image.getWidth(null)>128||image.getHeight(null)>128) {
                icon = new ImageIcon(icon.getImage().getScaledInstance(40, 40, java.awt.Image.SCALE_SMOOTH));
            }
            label.setIcon(icon);
        }
    }
}
